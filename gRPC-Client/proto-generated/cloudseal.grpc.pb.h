// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cloudseal.proto
#ifndef GRPC_cloudseal_2eproto__INCLUDED
#define GRPC_cloudseal_2eproto__INCLUDED

#include "cloudseal.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace cloudseal {

class CloudSeal final {
 public:
  static constexpr char const* service_full_name() {
    return "cloudseal.CloudSeal";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Uwierzytelnianie
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::cloudseal::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>> AsyncRegister(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::cloudseal::AuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>> AsyncLogin(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // Vault
    virtual ::grpc::Status UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::cloudseal::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>> AsyncUploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>>(AsyncUploadVaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>> PrepareAsyncUploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>>(PrepareAsyncUploadVaultRaw(context, request, cq));
    }
    virtual ::grpc::Status DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::cloudseal::VaultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::VaultResponse>> AsyncDownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::VaultResponse>>(AsyncDownloadVaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::VaultResponse>> PrepareAsyncDownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::VaultResponse>>(PrepareAsyncDownloadVaultRaw(context, request, cq));
    }
    // Pliki (z użyciem ścieżek lokalnych)
    virtual ::grpc::Status UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::cloudseal::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>> AsyncUploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>>(AsyncUploadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>> PrepareAsyncUploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>>(PrepareAsyncUploadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::cloudseal::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>> AsyncDownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>>(AsyncDownloadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::cloudseal::FileList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::FileList>> AsyncListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::FileList>>(AsyncListFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::FileList>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::FileList>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::cloudseal::GlobalStats* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::GlobalStats>> AsyncGetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::GlobalStats>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::GlobalStats>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::GlobalStats>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Uwierzytelnianie
      virtual void Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Vault
      virtual void UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Pliki (z użyciem ścieżek lokalnych)
      virtual void UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::AuthResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>* AsyncUploadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>* PrepareAsyncUploadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::VaultResponse>* AsyncDownloadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::VaultResponse>* PrepareAsyncDownloadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>* AsyncUploadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>* PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::Status>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::FileList>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::FileList>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::GlobalStats>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cloudseal::GlobalStats>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::cloudseal::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>> AsyncRegister(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::cloudseal::AuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>> AsyncLogin(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::cloudseal::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>> AsyncUploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>>(AsyncUploadVaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>> PrepareAsyncUploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>>(PrepareAsyncUploadVaultRaw(context, request, cq));
    }
    ::grpc::Status DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::cloudseal::VaultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>> AsyncDownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>>(AsyncDownloadVaultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>> PrepareAsyncDownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>>(PrepareAsyncDownloadVaultRaw(context, request, cq));
    }
    ::grpc::Status UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::cloudseal::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>> AsyncUploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>>(AsyncUploadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>> PrepareAsyncUploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>>(PrepareAsyncUploadFileRaw(context, request, cq));
    }
    ::grpc::Status DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::cloudseal::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>> AsyncDownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>>(AsyncDownloadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>> PrepareAsyncDownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>>(PrepareAsyncDownloadFileRaw(context, request, cq));
    }
    ::grpc::Status ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::cloudseal::FileList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>> AsyncListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>>(AsyncListFilesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    ::grpc::Status GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::cloudseal::GlobalStats* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>> AsyncGetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>>(AsyncGetStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>> PrepareAsyncGetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>>(PrepareAsyncGetStatsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)>) override;
      void UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response, std::function<void(::grpc::Status)>) override;
      void DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)>) override;
      void UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)>) override;
      void DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response, std::function<void(::grpc::Status)>) override;
      void ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response, std::function<void(::grpc::Status)>) override;
      void GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* AsyncUploadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* PrepareAsyncUploadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>* AsyncDownloadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>* PrepareAsyncDownloadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* AsyncUploadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>* AsyncGetStatsRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>* PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadVault_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadVault_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Uwierzytelnianie
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response);
    // Vault
    virtual ::grpc::Status UploadVault(::grpc::ServerContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response);
    virtual ::grpc::Status DownloadVault(::grpc::ServerContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response);
    // Pliki (z użyciem ścieżek lokalnych)
    virtual ::grpc::Status UploadFile(::grpc::ServerContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response);
    virtual ::grpc::Status DownloadFile(::grpc::ServerContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response);
    virtual ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response);
    virtual ::grpc::Status GetStats(::grpc::ServerContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::cloudseal::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::cloudseal::AuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::AuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadVault() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UploadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadVault(::grpc::ServerContext* context, ::cloudseal::VaultRequest* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadVault() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DownloadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadVault(::grpc::ServerContext* context, ::cloudseal::VaultQuery* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::VaultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadFile() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadFile(::grpc::ServerContext* context, ::cloudseal::FileTransferPath* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::cloudseal::FileTransferPath* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListFiles() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::cloudseal::AuthToken* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::FileList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStats() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::cloudseal::AuthToken* request, ::grpc::ServerAsyncResponseWriter< ::cloudseal::GlobalStats>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Login<WithAsyncMethod_UploadVault<WithAsyncMethod_DownloadVault<WithAsyncMethod_UploadFile<WithAsyncMethod_DownloadFile<WithAsyncMethod_ListFiles<WithAsyncMethod_GetStats<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UploadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadVault() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::VaultRequest, ::cloudseal::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response) { return this->UploadVault(context, request, response); }));}
    void SetMessageAllocatorFor_UploadVault(
        ::grpc::MessageAllocator< ::cloudseal::VaultRequest, ::cloudseal::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::VaultRequest, ::cloudseal::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadVault(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadVault() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::VaultQuery, ::cloudseal::VaultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response) { return this->DownloadVault(context, request, response); }));}
    void SetMessageAllocatorFor_DownloadVault(
        ::grpc::MessageAllocator< ::cloudseal::VaultQuery, ::cloudseal::VaultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::VaultQuery, ::cloudseal::VaultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DownloadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadVault(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadFile() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::FileTransferPath, ::cloudseal::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response) { return this->UploadFile(context, request, response); }));}
    void SetMessageAllocatorFor_UploadFile(
        ::grpc::MessageAllocator< ::cloudseal::FileTransferPath, ::cloudseal::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::FileTransferPath, ::cloudseal::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadFile() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::FileTransferPath, ::cloudseal::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response) { return this->DownloadFile(context, request, response); }));}
    void SetMessageAllocatorFor_DownloadFile(
        ::grpc::MessageAllocator< ::cloudseal::FileTransferPath, ::cloudseal::Status>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::FileTransferPath, ::cloudseal::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListFiles() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthToken, ::cloudseal::FileList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response) { return this->ListFiles(context, request, response); }));}
    void SetMessageAllocatorFor_ListFiles(
        ::grpc::MessageAllocator< ::cloudseal::AuthToken, ::cloudseal::FileList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthToken, ::cloudseal::FileList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStats() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthToken, ::cloudseal::GlobalStats>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response) { return this->GetStats(context, request, response); }));}
    void SetMessageAllocatorFor_GetStats(
        ::grpc::MessageAllocator< ::cloudseal::AuthToken, ::cloudseal::GlobalStats>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cloudseal::AuthToken, ::cloudseal::GlobalStats>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Login<WithCallbackMethod_UploadVault<WithCallbackMethod_DownloadVault<WithCallbackMethod_UploadFile<WithCallbackMethod_DownloadFile<WithCallbackMethod_ListFiles<WithCallbackMethod_GetStats<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadVault() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UploadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadVault() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DownloadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadFile() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListFiles() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStats() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadVault() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UploadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadVault(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadVault() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DownloadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadVault(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadFile() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListFiles() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStats() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadVault() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadVault(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadVault(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadVault() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DownloadVault(context, request, response); }));
    }
    ~WithRawCallbackMethod_DownloadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadVault(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadFile() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadFile() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DownloadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListFiles() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListFiles(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFiles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStats() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStats(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::AuthRequest,::cloudseal::AuthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::AuthRequest, ::cloudseal::AuthResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthRequest* /*request*/, ::cloudseal::AuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::AuthRequest,::cloudseal::AuthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadVault() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::VaultRequest, ::cloudseal::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::VaultRequest, ::cloudseal::Status>* streamer) {
                       return this->StreamedUploadVault(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultRequest* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadVault(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::VaultRequest,::cloudseal::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadVault : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DownloadVault() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::VaultQuery, ::cloudseal::VaultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::VaultQuery, ::cloudseal::VaultResponse>* streamer) {
                       return this->StreamedDownloadVault(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DownloadVault() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadVault(::grpc::ServerContext* /*context*/, const ::cloudseal::VaultQuery* /*request*/, ::cloudseal::VaultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadVault(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::VaultQuery,::cloudseal::VaultResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadFile() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::FileTransferPath, ::cloudseal::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::FileTransferPath, ::cloudseal::Status>* streamer) {
                       return this->StreamedUploadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::FileTransferPath,::cloudseal::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DownloadFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::FileTransferPath, ::cloudseal::Status>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::FileTransferPath, ::cloudseal::Status>* streamer) {
                       return this->StreamedDownloadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DownloadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadFile(::grpc::ServerContext* /*context*/, const ::cloudseal::FileTransferPath* /*request*/, ::cloudseal::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::FileTransferPath,::cloudseal::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListFiles() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::AuthToken, ::cloudseal::FileList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::AuthToken, ::cloudseal::FileList>* streamer) {
                       return this->StreamedListFiles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::FileList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFiles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::AuthToken,::cloudseal::FileList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStats() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cloudseal::AuthToken, ::cloudseal::GlobalStats>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cloudseal::AuthToken, ::cloudseal::GlobalStats>* streamer) {
                       return this->StreamedGetStats(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStats(::grpc::ServerContext* /*context*/, const ::cloudseal::AuthToken* /*request*/, ::cloudseal::GlobalStats* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cloudseal::AuthToken,::cloudseal::GlobalStats>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_UploadVault<WithStreamedUnaryMethod_DownloadVault<WithStreamedUnaryMethod_UploadFile<WithStreamedUnaryMethod_DownloadFile<WithStreamedUnaryMethod_ListFiles<WithStreamedUnaryMethod_GetStats<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_UploadVault<WithStreamedUnaryMethod_DownloadVault<WithStreamedUnaryMethod_UploadFile<WithStreamedUnaryMethod_DownloadFile<WithStreamedUnaryMethod_ListFiles<WithStreamedUnaryMethod_GetStats<Service > > > > > > > > StreamedService;
};

}  // namespace cloudseal


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_cloudseal_2eproto__INCLUDED
