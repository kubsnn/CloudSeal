// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cloudseal.proto

#include "cloudseal.pb.h"
#include "cloudseal.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cloudseal {

static const char* CloudSeal_method_names[] = {
  "/cloudseal.CloudSeal/Register",
  "/cloudseal.CloudSeal/Login",
  "/cloudseal.CloudSeal/UploadVault",
  "/cloudseal.CloudSeal/DownloadVault",
  "/cloudseal.CloudSeal/UploadFile",
  "/cloudseal.CloudSeal/DownloadFile",
  "/cloudseal.CloudSeal/ListFiles",
  "/cloudseal.CloudSeal/GetStats",
};

std::unique_ptr< CloudSeal::Stub> CloudSeal::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CloudSeal::Stub> stub(new CloudSeal::Stub(channel, options));
  return stub;
}

CloudSeal::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(CloudSeal_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(CloudSeal_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadVault_(CloudSeal_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadVault_(CloudSeal_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadFile_(CloudSeal_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadFile_(CloudSeal_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListFiles_(CloudSeal_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStats_(CloudSeal_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CloudSeal::Stub::Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::cloudseal::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void CloudSeal::Stub::async::Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::Register(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* CloudSeal::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::AuthResponse, ::cloudseal::AuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* CloudSeal::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::cloudseal::AuthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void CloudSeal::Stub::async::Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::AuthRequest, ::cloudseal::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::Login(::grpc::ClientContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* CloudSeal::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::AuthResponse, ::cloudseal::AuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::AuthResponse>* CloudSeal::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::cloudseal::AuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::cloudseal::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::VaultRequest, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadVault_, context, request, response);
}

void CloudSeal::Stub::async::UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::VaultRequest, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadVault_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::UploadVault(::grpc::ClientContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadVault_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* CloudSeal::Stub::PrepareAsyncUploadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::Status, ::cloudseal::VaultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadVault_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* CloudSeal::Stub::AsyncUploadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadVaultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::cloudseal::VaultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::VaultQuery, ::cloudseal::VaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadVault_, context, request, response);
}

void CloudSeal::Stub::async::DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::VaultQuery, ::cloudseal::VaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadVault_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::DownloadVault(::grpc::ClientContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadVault_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>* CloudSeal::Stub::PrepareAsyncDownloadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::VaultResponse, ::cloudseal::VaultQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadVault_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::VaultResponse>* CloudSeal::Stub::AsyncDownloadVaultRaw(::grpc::ClientContext* context, const ::cloudseal::VaultQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadVaultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::cloudseal::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::FileTransferPath, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadFile_, context, request, response);
}

void CloudSeal::Stub::async::UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::FileTransferPath, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::UploadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* CloudSeal::Stub::PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::Status, ::cloudseal::FileTransferPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* CloudSeal::Stub::AsyncUploadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::cloudseal::Status* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::FileTransferPath, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadFile_, context, request, response);
}

void CloudSeal::Stub::async::DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::FileTransferPath, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadFile_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::DownloadFile(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* CloudSeal::Stub::PrepareAsyncDownloadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::Status, ::cloudseal::FileTransferPath, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::Status>* CloudSeal::Stub::AsyncDownloadFileRaw(::grpc::ClientContext* context, const ::cloudseal::FileTransferPath& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::cloudseal::FileList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::AuthToken, ::cloudseal::FileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListFiles_, context, request, response);
}

void CloudSeal::Stub::async::ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::AuthToken, ::cloudseal::FileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::ListFiles(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>* CloudSeal::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::FileList, ::cloudseal::AuthToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListFiles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::FileList>* CloudSeal::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListFilesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CloudSeal::Stub::GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::cloudseal::GlobalStats* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cloudseal::AuthToken, ::cloudseal::GlobalStats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStats_, context, request, response);
}

void CloudSeal::Stub::async::GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cloudseal::AuthToken, ::cloudseal::GlobalStats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStats_, context, request, response, std::move(f));
}

void CloudSeal::Stub::async::GetStats(::grpc::ClientContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>* CloudSeal::Stub::PrepareAsyncGetStatsRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cloudseal::GlobalStats, ::cloudseal::AuthToken, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cloudseal::GlobalStats>* CloudSeal::Stub::AsyncGetStatsRaw(::grpc::ClientContext* context, const ::cloudseal::AuthToken& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

CloudSeal::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::AuthRequest, ::cloudseal::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::AuthRequest* req,
             ::cloudseal::AuthResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::AuthRequest, ::cloudseal::AuthResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::AuthRequest* req,
             ::cloudseal::AuthResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::VaultRequest, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::VaultRequest* req,
             ::cloudseal::Status* resp) {
               return service->UploadVault(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::VaultQuery, ::cloudseal::VaultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::VaultQuery* req,
             ::cloudseal::VaultResponse* resp) {
               return service->DownloadVault(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::FileTransferPath, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::FileTransferPath* req,
             ::cloudseal::Status* resp) {
               return service->UploadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::FileTransferPath, ::cloudseal::Status, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::FileTransferPath* req,
             ::cloudseal::Status* resp) {
               return service->DownloadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::AuthToken, ::cloudseal::FileList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::AuthToken* req,
             ::cloudseal::FileList* resp) {
               return service->ListFiles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CloudSeal_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CloudSeal::Service, ::cloudseal::AuthToken, ::cloudseal::GlobalStats, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CloudSeal::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cloudseal::AuthToken* req,
             ::cloudseal::GlobalStats* resp) {
               return service->GetStats(ctx, req, resp);
             }, this)));
}

CloudSeal::Service::~Service() {
}

::grpc::Status CloudSeal::Service::Register(::grpc::ServerContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::Login(::grpc::ServerContext* context, const ::cloudseal::AuthRequest* request, ::cloudseal::AuthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::UploadVault(::grpc::ServerContext* context, const ::cloudseal::VaultRequest* request, ::cloudseal::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::DownloadVault(::grpc::ServerContext* context, const ::cloudseal::VaultQuery* request, ::cloudseal::VaultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::UploadFile(::grpc::ServerContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::DownloadFile(::grpc::ServerContext* context, const ::cloudseal::FileTransferPath* request, ::cloudseal::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::ListFiles(::grpc::ServerContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::FileList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CloudSeal::Service::GetStats(::grpc::ServerContext* context, const ::cloudseal::AuthToken* request, ::cloudseal::GlobalStats* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cloudseal

